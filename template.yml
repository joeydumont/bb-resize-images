# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Resize images uploaded in the simpleappbucket S3 bucket

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform: AWS::Serverless-2016-10-31

# Shared configuration for all resources, more in
# https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    # The PermissionsBoundary allows users to safely develop with their function's permissions constrained
    # to their current application. All the functions and roles in this application have to include it and
    # it has to be manually updated when you add resources to your application.
    # More information in https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html
    PermissionsBoundary: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/${AppId}-${AWS::Region}-PermissionsBoundary'

Parameters:
  AppId:
    Type: String

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  ResizeImagesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: src/handlers/resize_images.resizeImagesHandler
      Runtime: nodejs10.x
      Description: A Lambda function that resizes images.
      MemorySize: 128
      Timeout: 60
      Policies:
        - S3FullAccessPolicy:
            BucketName: !Sub aws-${AWS::Region}-${AWS::AccountId}-${AppId}-simpleappbucket
      Events:
        simpleappbucketEvent:
          Type: S3
          Properties:
            Bucket: !Ref simpleappbucket
            # We resize the image in-place, so we need to be careful to avoid
            # infinite loops. The resize functions uses streams, which result
            # in a POST API call being used instead of PUT, but the web app
            # uses a simple PUT. This ensures that the resize function is only
            # called on initial upload of the image.
            Events: s3:ObjectCreated:Put
            Filter:
              S3Key:
                Rules:
                # Only one suffix allowed: https://github.com/aws/aws-cli/issues/1465
                # Instead we let the Lambda function if it can resize the object uploaded
                # to media.
                  - Name: prefix
                    Value: "media"
  simpleappbucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub aws-${AWS::Region}-${AWS::AccountId}-${AppId}-simpleappbucket
